# This is a basic workflow to help you get started with Actions

name: Destroy_Plan

# Controls when the action will run. Triggers the workflow on push or pull request
# events but only for the master branch
on:
  workflow_dispatch:
    inputs:
      action:
        description: 'Action to trigger (pull or push)'     
        required: true
        default: 'pull' 
  repository_dispatch:
    types:
      - "Azure Activity Logs"
      - "GitHub CLI"
      - "PowerShell"
      - "Bash"
  pull_request:
    branches:
      - "main"
  pull_request_review:
    branches:
      - "main"
    types:
      - "submitted"
    
env:
  ARM_ACCESS_KEY: ${{ secrets.ARM_ACCESS_KEY }} 
  ARM_CLIENT_ID: ${{ secrets.ARM_CLIENT_ID }}
  ARM_CLIENT_SECRET: ${{ secrets.ARM_CLIENT_SECRET }}
  ARM_SUBSCRIPTION_ID: ${{ secrets.ARM_SUBSCRIPTION_ID }}
  ARM_TENANT_ID: ${{ secrets.ARM_TENANT_ID }}
  TF_VAR_subscription_id: ${{ secrets.ARM_SUBSCRIPTION_ID }}
# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: "."
    steps:
      - uses: actions/checkout@v2
      - uses: hashicorp/setup-terraform@v1

    # Steps represent a sequence of tasks that will be executed as part of the job
      # Runs a single command using the runners shell
     

      # Runs a set of commands using the runners shell
       
      # Runs a set of commands using the runners shell
      - name: Terraform fmt
        id: fmt
        run: terraform fmt
        continue-on-error: true

      - name: Terraform Init
        id: init
        run: terraform init

      - name: Terraform Validate
        id: validate
        run: terraform validate -no-color

      - name: Terraform Plan - Destroy
        id: plan
        run: terraform plan -no-color -destroy
        continue-on-error: false
      - name: Terraform Destroy
        id: destroy
        run: terraform destroy -auto-approve -no-color
      - uses: actions/github-script@0.9.0
        if: github.event_name == 'pull_request'
        env:
          PLAN: "terraform\n${{ steps.plan.outputs.stdout }}"
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const output = `#### Terraform Format and Style üñå\`${{ steps.fmt.outcome }}\`
            #### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
            #### Terraform Validation ü§ñ${{ steps.validate.outputs.stdout }}
            #### Terraform Plan üìñ\`${{ steps.plan.outcome }}\`
            
            <details><summary>Show Plan</summary>
            
            \`\`\`${process.env.PLAN}\`\`\`
            
            </details>
            
            *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`, Working Directory: \`${{ env.tf_actions_working_dir }}\`, Workflow: \`${{ github.workflow }}\`*`;
              
            github.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })
